<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，
这样就能够保证namespace的值是唯一的-->
<mapper namespace="cn.thinkbam.domain.User">

    <!--通过<resultMap>映射实体类属性名和表的字段名对应关系-->
    <resultMap id="user" type="cn.thinkbam.domain.User">
        <id property="id" column="id" javaType="int" jdbcType="INTEGER"/>
        <result property="name" column="name" javaType="String" jdbcType="VARCHAR"/>
        <result property="age" column="age" javaType="int" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 在select标签中编写查询的SQL语句，
    设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复使用parameterType属性指明查询时使用的参数类型，
    resultType属性指明查询返回的结果集类型
    resultType="User"就表示将查询结果封装成一个User类的对象返回
    User类就是users表所对应的实体类
    -->
    <!--根据id查询得到一个user对象-->
    <select id="getUser" parameterType="int" resultType="cn.thinkbam.domain.User">
        select id,name,age from ${db.schema}.users where id=#{id}
    </select>

    <!--查询所有用户列表-->
    <select id="getUsers1" resultType="cn.thinkbam.domain.User">
        SELECT id,name,age FROM ${db.schema}.users
    </select>

    <!--查询所有用户列表-->
    <select id="getUsers2" resultMap="user">
        SELECT id,name,age FROM ${db.schema}.users
    </select>

    <!--查询所有用户列表-->
    <select id="getUsers3" resultType="java.util.Map">
        SELECT id,name,age FROM ${db.schema}.users
    </select>

    <!--添加用户-->
    <insert id="insertUser1" parameterType="cn.thinkbam.domain.User">
        INSERT INTO ${db.schema}.users (`name`, `age`)
        VALUES (#{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER})
    </insert>

    <!--添加用户-->
    <insert id="insertUser2" parameterType="java.util.Map">
        INSERT INTO ${db.schema}.users (`name`, `age`)
        VALUES (#{name}, #{age})
    </insert>

    <!--更新-->
    <update id="updateUser" parameterType="cn.thinkbam.domain.User">
        UPDATE ${db.schema}.users
        SET name = #{name}, age = #{age}
        WHERE id = #{id}
    </update>

    <!--删除-->
    <delete id="deleteUser" parameterType="int">
        DELETE
        FROM ${db.schema}.users
        WHERE id = #{id}
    </delete>
</mapper>